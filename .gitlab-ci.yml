stages:
  - prepare
  - build_and_test

# If you are looking for a place where to add 'UNITY_LICENSE_FILE' and other secrets, please visit your project's gitlab page:
# settings > CI/CD > Variables instead
variables:
  BUILD_NAME: ProjectName
  UNITY_ACTIVATION_FILE: ./unity3d.alf
  IMAGE: unityci/editor # https://hub.docker.com/r/unityci/editor
  IMAGE_VERSION: 1 # This will automatically use latest v1.x.x, see https://github.com/game-ci/docker/releases
  UNITY_DIR: $CI_PROJECT_DIR # this needs to be an absolute path. Defaults to the root of your tree.
  # You can expose this in Unity via Application.version
  COMMIT_TIME: now
  #VERSION_NUMBER_VAR: $CI_COMMIT_REF_SLUG-$CI_PIPELINE_ID-$CI_JOB_ID
  #VERSION_BUILD_VAR: $CI_PIPELINE_IID
  COMMIT_URL: ${CI_PROJECT_URL}/-/commit/${CI_COMMIT_SHA}
  IS_DEVELOPMENT_BUILD: "false"
  GRADLE_OPTS: -Dkotlin.incremental=false -Dorg.gradle.jvmargs="-Xmx2g -XX:MaxMetaspaceSize=1g -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF-8"

image: $IMAGE:$UNITY_VERSION-base-$IMAGE_VERSION

get-unity-version:
  image: alpine
  stage: prepare
  variables:
    GIT_DEPTH: 1
  script:
    - echo UNITY_VERSION=$(cat $UNITY_DIR/ProjectSettings/ProjectVersion.txt | grep "m_EditorVersion:.*" | awk '{ print $2}') | tee prepare.env
  artifacts:
    reports:
      dotenv: prepare.env

notify_discord:
  image:
    name: bitnami/git
  stage: prepare
  script:
    - chmod +x ./ci/discord_notify.sh && bash ./ci/discord_notify.sh

.unity_before_script: &unity_before_script
  before_script:
    - chmod +x ./ci/before_script.sh && ./ci/before_script.sh
    - echo "Init git submodules"
    - git submodule update --init --recursive
    - echo "git submodules init done"

    - chmod +x ./ci/local_find_unity.sh && ./ci/local_find_unity.sh
  needs:
    - job: get-unity-version
      artifacts: true

.cache: &cache
  cache:
    key: "$CI_PROJECT_NAMESPACE-$CI_PROJECT_NAME-$CI_COMMIT_REF_SLUG-$TEST_PLATFORM"
    paths:
      - $UNITY_DIR/Library/

.license: &license
  rules:
    - if: '$UNITY_LICENSE != null'
      when: always

.unity_defaults: &unity_defaults
  <<:
    - *unity_before_script
    - *cache
    - *license
  tags:
    - game
    - mobile

get-activation-file:
  <<: *unity_before_script
  rules:
    - if: '$UNITY_LICENSE == null'
  stage: prepare
  script:
    - chmod +x ./ci/get_activation_file.sh && ./ci/get_activation_file.sh
  artifacts:
    paths:
      - $UNITY_ACTIVATION_FILE
    expire_in: 10 min # Expiring this as artifacts may contain sensitive data and should not be kept public
  tags:
    - game
    - mobile

.test: &test
  stage: build_and_test
  <<: *unity_defaults
  script:
    - chmod +x ./ci/test.sh && ./ci/test.sh
  artifacts:
    when: always
    expire_in: 2 weeks
  coverage: /<Linecoverage>(.*?)</Linecoverage>/

.build: &build
  stage: build_and_test
  <<: *unity_defaults
  script:
    - chmod +x ./ci/local_find_unity.sh && ./ci/local_find_unity.sh
    - echo 'local_find_unity done'
    - chmod +x ./ci/build.sh && ./ci/build.sh
    - chmod +x ./ci/discord_notify.sh && bash ./ci/discord_notify.sh
  timeout: 3 hours 30 minutes
  artifacts:
    paths:
      - $UNITY_DIR/Builds/

build-android:
  <<: *build
  image: $IMAGE:$UNITY_VERSION-android-$IMAGE_VERSION
  variables:
    BUILD_TARGET: Android
    BUILD_APP_BUNDLE: "false"
    BuildOptions: Development
  rules:
    - if: $CI_COMMIT_BRANCH == "develop" || $CI_COMMIT_BRANCH == "main" || $CI_COMMIT_BRANCH == "master"
    
build-android-app-bundle:
  <<: *build
  image: $IMAGE:$UNITY_VERSION-android-$IMAGE_VERSION
  variables:
    BUILD_TARGET: Android
    BUILD_APP_BUNDLE: "true"
    ANDROID_KEYSTORE_BASE64: $ANDROID_KEYSTORE_BASE64
  rules:
    - if: $CI_COMMIT_BRANCH == "main" || $CI_COMMIT_BRANCH == "master"


build-ios-xcode-develop:
  <<: *build
  image: $IMAGE:$UNITY_VERSION-ios-$IMAGE_VERSION
  variables:
    BUILD_TARGET: iOS
    BuildOptions: Development
  rules:
    - if: $CI_COMMIT_BRANCH == "develop" || $CI_COMMIT_BRANCH =~ "/^ios/develop.*/"
build-ios-xcode:
  <<: *build
  image: $IMAGE:$UNITY_VERSION-ios-$IMAGE_VERSION
  variables:
    BUILD_TARGET: iOS
  rules:
    - if: $CI_COMMIT_BRANCH =~ "/^ios/main.*/" || $CI_COMMIT_BRANCH =~ "/^ios/master.*/"
